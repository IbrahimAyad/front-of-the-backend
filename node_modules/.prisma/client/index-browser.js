
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  firstName: 'firstName',
  lastName: 'lastName',
  name: 'name',
  role: 'role',
  isActive: 'isActive',
  refreshToken: 'refreshToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  dateOfBirth: 'dateOfBirth',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  longDescription: 'longDescription',
  category: 'category',
  subcategory: 'subcategory',
  price: 'price',
  compareAtPrice: 'compareAtPrice',
  costPrice: 'costPrice',
  sku: 'sku',
  barcode: 'barcode',
  slug: 'slug',
  brand: 'brand',
  fabric: 'fabric',
  pattern: 'pattern',
  season: 'season',
  occasions: 'occasions',
  styleAttributes: 'styleAttributes',
  care: 'care',
  smartAttributes: 'smartAttributes',
  fabricMarketing: 'fabricMarketing',
  fabricCare: 'fabricCare',
  fabricBenefits: 'fabricBenefits',
  colorFamily: 'colorFamily',
  hexPrimary: 'hexPrimary',
  hexSecondary: 'hexSecondary',
  primaryOccasion: 'primaryOccasion',
  occasionTags: 'occasionTags',
  trendingFor: 'trendingFor',
  outfitRole: 'outfitRole',
  pairsWellWith: 'pairsWellWith',
  styleNotes: 'styleNotes',
  localKeywords: 'localKeywords',
  targetLocation: 'targetLocation',
  trackStock: 'trackStock',
  totalStock: 'totalStock',
  availableStock: 'availableStock',
  reservedStock: 'reservedStock',
  minimumStock: 'minimumStock',
  maximumStock: 'maximumStock',
  reorderPoint: 'reorderPoint',
  reorderQuantity: 'reorderQuantity',
  status: 'status',
  isPublished: 'isPublished',
  isFeatured: 'isFeatured',
  isOnSale: 'isOnSale',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  tags: 'tags',
  weight: 'weight',
  dimensions: 'dimensions',
  supplierId: 'supplierId',
  supplierSku: 'supplierSku',
  leadTime: 'leadTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  publishedAt: 'publishedAt',
  discontinuedAt: 'discontinuedAt'
};

exports.Prisma.CollectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  heroImage: 'heroImage',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  rules: 'rules',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCollectionScalarFieldEnum = {
  productId: 'productId',
  collectionId: 'collectionId',
  position: 'position'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  sku: 'sku',
  barcode: 'barcode',
  size: 'size',
  color: 'color',
  material: 'material',
  fit: 'fit',
  imageUrl: 'imageUrl',
  imageAlt: 'imageAlt',
  price: 'price',
  compareAtPrice: 'compareAtPrice',
  costPrice: 'costPrice',
  stock: 'stock',
  reservedStock: 'reservedStock',
  minimumStock: 'minimumStock',
  reorderPoint: 'reorderPoint',
  weight: 'weight',
  isActive: 'isActive',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  altText: 'altText',
  caption: 'caption',
  isPrimary: 'isPrimary',
  position: 'position',
  width: 'width',
  height: 'height',
  size: 'size',
  createdAt: 'createdAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  zipCode: 'zipCode',
  website: 'website',
  taxId: 'taxId',
  terms: 'terms',
  leadTime: 'leadTime',
  minimumOrder: 'minimumOrder',
  rating: 'rating',
  onTimeDelivery: 'onTimeDelivery',
  qualityRating: 'qualityRating',
  isActive: 'isActive',
  isPreferred: 'isPreferred',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  orderNumber: 'orderNumber',
  status: 'status',
  totalAmount: 'totalAmount',
  currency: 'currency',
  orderDate: 'orderDate',
  expectedDate: 'expectedDate',
  receivedDate: 'receivedDate',
  notes: 'notes',
  shippingCost: 'shippingCost',
  taxAmount: 'taxAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseOrderItemScalarFieldEnum = {
  id: 'id',
  purchaseOrderId: 'purchaseOrderId',
  productId: 'productId',
  variantId: 'variantId',
  description: 'description',
  quantity: 'quantity',
  unitCost: 'unitCost',
  totalCost: 'totalCost',
  quantityReceived: 'quantityReceived',
  createdAt: 'createdAt'
};

exports.Prisma.InventoryLogScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  variantId: 'variantId',
  type: 'type',
  quantity: 'quantity',
  previousStock: 'previousStock',
  newStock: 'newStock',
  reason: 'reason',
  reference: 'reference',
  userId: 'userId',
  createdAt: 'createdAt'
};

exports.Prisma.StockAlertScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  variantId: 'variantId',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  isResolved: 'isResolved',
  priority: 'priority',
  createdAt: 'createdAt',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  customerId: 'customerId',
  customerName: 'customerName',
  email: 'email',
  rating: 'rating',
  title: 'title',
  content: 'content',
  isVerified: 'isVerified',
  isPublished: 'isPublished',
  isHelpful: 'isHelpful',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  total: 'total',
  totalAmount: 'totalAmount',
  status: 'status',
  paymentStatus: 'paymentStatus',
  dueDate: 'dueDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId',
  quantity: 'quantity',
  price: 'price',
  customizations: 'customizations'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  type: 'type',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  source: 'source',
  status: 'status',
  value: 'value',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MeasurementScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  dateRecorded: 'dateRecorded',
  chest: 'chest',
  waist: 'waist',
  hips: 'hips',
  inseam: 'inseam',
  outseam: 'outseam',
  shoulders: 'shoulders',
  armLength: 'armLength',
  neckSize: 'neckSize',
  jacketLength: 'jacketLength',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiActionScalarFieldEnum = {
  id: 'id',
  agent: 'agent',
  input: 'input',
  output: 'output',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerProfileScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  customerTier: 'customerTier',
  engagementScore: 'engagementScore',
  vipStatus: 'vipStatus',
  jacketSize: 'jacketSize',
  jacketSizeConfidence: 'jacketSizeConfidence',
  vestSize: 'vestSize',
  vestSizeConfidence: 'vestSizeConfidence',
  shirtSize: 'shirtSize',
  shirtSizeConfidence: 'shirtSizeConfidence',
  shoeSize: 'shoeSize',
  shoeSizeConfidence: 'shoeSizeConfidence',
  pantsSize: 'pantsSize',
  pantsSizeConfidence: 'pantsSizeConfidence',
  sizeProfileCompleteness: 'sizeProfileCompleteness',
  totalSpent: 'totalSpent',
  totalOrders: 'totalOrders',
  averageOrderValue: 'averageOrderValue',
  repeatCustomer: 'repeatCustomer',
  highValueFirstOrder: 'highValueFirstOrder',
  primaryOccasion: 'primaryOccasion',
  preferredStyles: 'preferredStyles',
  preferredColors: 'preferredColors',
  acceptsEmailMarketing: 'acceptsEmailMarketing',
  acceptsSmsMarketing: 'acceptsSmsMarketing',
  marketingTags: 'marketingTags',
  firstPurchaseDate: 'firstPurchaseDate',
  lastPurchaseDate: 'lastPurchaseDate',
  daysSinceLastPurchase: 'daysSinceLastPurchase',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseHistoryScalarFieldEnum = {
  id: 'id',
  customerProfileId: 'customerProfileId',
  orderId: 'orderId',
  orderDate: 'orderDate',
  paidDate: 'paidDate',
  productNames: 'productNames',
  orderTotal: 'orderTotal'
};

exports.Prisma.CustomerSegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  criteria: 'criteria',
  customerCount: 'customerCount',
  avgOrderValue: 'avgOrderValue',
  totalRevenue: 'totalRevenue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OutfitTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  season: 'season',
  basePrice: 'basePrice',
  discount: 'discount',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OutfitComponentScalarFieldEnum = {
  id: 'id',
  outfitId: 'outfitId',
  productId: 'productId',
  componentType: 'componentType',
  quantity: 'quantity',
  isRequired: 'isRequired',
  position: 'position'
};

exports.Prisma.SavedOutfitScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  templateId: 'templateId',
  name: 'name',
  notes: 'notes',
  totalPrice: 'totalPrice',
  customizations: 'customizations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ColorPaletteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  family: 'family',
  hexCode: 'hexCode',
  displayOrder: 'displayOrder',
  formalityScore: 'formalityScore',
  versatilityScore: 'versatilityScore',
  seasonality: 'seasonality',
  createdAt: 'createdAt'
};

exports.Prisma.EventProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  formalityRange: 'formalityRange',
  seasonalPeak: 'seasonalPeak',
  typicalAge: 'typicalAge',
  essentialItems: 'essentialItems',
  popularColors: 'popularColors',
  trendingStyles: 'trendingStyles',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF',
  CUSTOMER: 'CUSTOMER'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  DELIVERED: 'DELIVERED'
};

exports.AppointmentType = exports.$Enums.AppointmentType = {
  CONSULTATION: 'CONSULTATION',
  FITTING: 'FITTING',
  MEASUREMENT: 'MEASUREMENT',
  DELIVERY: 'DELIVERY',
  FOLLOW_UP: 'FOLLOW_UP'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.LeadSource = exports.$Enums.LeadSource = {
  WEBSITE: 'WEBSITE',
  REFERRAL: 'REFERRAL',
  SOCIAL_MEDIA: 'SOCIAL_MEDIA',
  ADVERTISING: 'ADVERTISING',
  WALK_IN: 'WALK_IN',
  OTHER: 'OTHER'
};

exports.LeadStatus = exports.$Enums.LeadStatus = {
  NEW: 'NEW',
  CONTACTED: 'CONTACTED',
  QUALIFIED: 'QUALIFIED',
  PROPOSAL: 'PROPOSAL',
  NEGOTIATION: 'NEGOTIATION',
  CLOSED_WON: 'CLOSED_WON',
  CLOSED_LOST: 'CLOSED_LOST'
};

exports.Prisma.ModelName = {
  User: 'User',
  Customer: 'Customer',
  Product: 'Product',
  Collection: 'Collection',
  ProductCollection: 'ProductCollection',
  ProductVariant: 'ProductVariant',
  ProductImage: 'ProductImage',
  Supplier: 'Supplier',
  PurchaseOrder: 'PurchaseOrder',
  PurchaseOrderItem: 'PurchaseOrderItem',
  InventoryLog: 'InventoryLog',
  StockAlert: 'StockAlert',
  ProductReview: 'ProductReview',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Appointment: 'Appointment',
  Lead: 'Lead',
  Measurement: 'Measurement',
  AiAction: 'AiAction',
  CustomerProfile: 'CustomerProfile',
  PurchaseHistory: 'PurchaseHistory',
  CustomerSegment: 'CustomerSegment',
  OutfitTemplate: 'OutfitTemplate',
  OutfitComponent: 'OutfitComponent',
  SavedOutfit: 'SavedOutfit',
  ColorPalette: 'ColorPalette',
  EventProfile: 'EventProfile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

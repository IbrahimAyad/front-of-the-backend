generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELIVERED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  CONSULTATION
  FITTING
  MEASUREMENT
  DELIVERY
  FOLLOW_UP
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  CLOSED_WON
  CLOSED_LOST
}

enum LeadSource {
  WEBSITE
  REFERRAL
  SOCIAL_MEDIA
  ADVERTISING
  WALK_IN
  OTHER
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   // Changed from 'password' to 'passwordHash'
  firstName    String
  lastName     String
  name         String?  // Added for compatibility
  role         UserRole @default(CUSTOMER)
  isActive     Boolean  @default(true)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Customer {
  id          String   @id @default(cuid())
  name        String   // Added 'name' field as expected by backend
  firstName   String?
  lastName    String?
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  dateOfBirth DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders        Order[]
  appointments  Appointment[]
  measurements  Measurement[]
  leads         Lead[]

  @@map("customers")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String
  price       Decimal
  sku         String   @unique
  inStock     Boolean  @default(true)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  customerId    String
  total         Decimal     // Changed from 'totalAmount' to 'total'
  totalAmount   Decimal?    // Keep both for compatibility
  status        OrderStatus @default(PENDING)
  paymentStatus String?     // Added paymentStatus field
  dueDate       DateTime?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  customer Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items    OrderItem[]

  @@map("orders")
}

model OrderItem {
  id             String  @id @default(cuid())
  orderId        String
  productId      String
  quantity       Int
  price          Decimal
  customizations String?

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Appointment {
  id         String            @id @default(cuid())
  customerId String
  date       DateTime          // Changed from 'startTime' to 'date'
  startTime  DateTime?         // Keep both for compatibility
  endTime    DateTime?
  type       AppointmentType
  status     AppointmentStatus @default(SCHEDULED)
  notes      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Lead {
  id         String     @id @default(cuid())
  customerId String?
  source     LeadSource
  status     LeadStatus @default(NEW)
  value      Decimal?
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  customer Customer? @relation(fields: [customerId], references: [id])

  @@map("leads")
}

model Measurement {
  id           String   @id @default(cuid())
  customerId   String
  dateRecorded DateTime // Added dateRecorded field as expected by backend
  chest        Decimal?
  waist        Decimal?
  hips         Decimal?
  inseam       Decimal?
  outseam      Decimal?
  shoulders    Decimal?
  armLength    Decimal?
  neckSize     Decimal?
  jacketLength Decimal?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("measurements")
}

model AiAction {
  id        String   @id @default(cuid())
  agent     String
  input     Json
  output    Json
  status    String
  createdAt DateTime @default(now())
}


